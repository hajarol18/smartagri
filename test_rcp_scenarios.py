#!/usr/bin/env python3
"""
Test des Sc√©narios RCP IPCC dans Smart Agri Decision
V√©rifie la g√©n√©ration automatique et l'analyse des sc√©narios
"""

import os
import sys
import xml.etree.ElementTree as ET

def test_rcp_menu_structure():
    """Test de la structure du menu RCP"""
    print("üîç Test de la structure du menu RCP...")
    
    try:
        tree = ET.parse('smart_agri_decision/views/main_menu.xml')
        root = tree.getroot()
        
        # V√©rifier la pr√©sence du menu climatique
        climat_menu = root.find(".//menuitem[@id='menu_climat_main']")
        if climat_menu is None:
            print("‚ùå Menu climatique manquant")
            return False
        
        # V√©rifier la pr√©sence du sous-menu RCP
        rcp_menu = root.find(".//menuitem[@id='menu_scenarios_rcp']")
        if rcp_menu is None:
            print("‚ùå Menu sc√©narios RCP manquant")
            return False
        
        # V√©rifier les sous-menus RCP
        generation_menu = root.find(".//menuitem[@id='menu_rcp_generation']")
        scenarios_menu = root.find(".//menuitem[@id='menu_rcp_scenarios']")
        donnees_menu = root.find(".//menuitem[@id='menu_rcp_donnees']")
        analyse_menu = root.find(".//menuitem[@id='menu_rcp_analyse']")
        
        # Debug: afficher ce qui est trouv√©
        print(f"   - Menu g√©n√©ration: {'‚úÖ' if generation_menu is not None else '‚ùå'}")
        print(f"   - Menu sc√©narios: {'‚úÖ' if scenarios_menu is not None else '‚ùå'}")
        print(f"   - Menu donn√©es: {'‚úÖ' if donnees_menu is not None else '‚ùå'}")
        print(f"   - Menu analyse: {'‚úÖ' if analyse_menu is not None else '‚ùå'}")
        
        if generation_menu is not None and scenarios_menu is not None and donnees_menu is not None and analyse_menu is not None:
            print("‚úÖ Structure du menu RCP correcte")
            return True
        else:
            print("‚ùå Sous-menus RCP manquants")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test du menu RCP: {e}")
        return False

def test_rcp_actions():
    """Test des actions RCP"""
    print("üîç Test des actions RCP...")
    
    try:
        tree = ET.parse('smart_agri_decision/views/actions.xml')
        root = tree.getroot()
        
        # V√©rifier l'action de g√©n√©ration automatique
        action_generation = root.find(".//record[@id='action_generer_scenarios_rcp']")
        if action_generation is None:
            print("‚ùå Action de g√©n√©ration RCP manquante")
            return False
        
        # V√©rifier l'action des sc√©narios RCP
        action_scenarios = root.find(".//record[@id='action_rcp_scenarios']")
        if action_scenarios is None:
            print("‚ùå Action des sc√©narios RCP manquante")
            return False
        
        # V√©rifier l'action des donn√©es annuelles
        action_donnees = root.find(".//record[@id='action_rcp_donnees_annuelles']")
        if action_donnees is None:
            print("‚ùå Action des donn√©es annuelles RCP manquante")
            return False
        
        print("‚úÖ Actions RCP correctes")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des actions RCP: {e}")
        return False

def test_rcp_views():
    """Test des vues RCP"""
    print("üîç Test des vues RCP...")
    
    try:
        tree = ET.parse('smart_agri_decision/views/rcp_views.xml')
        root = tree.getroot()
        
        # V√©rifier la vue de g√©n√©ration
        vue_generation = root.find(".//record[@id='view_rcp_scenario_generation']")
        if vue_generation is None:
            print("‚ùå Vue de g√©n√©ration RCP manquante")
            return False
        
        # V√©rifier la vue kanban
        vue_kanban = root.find(".//record[@id='view_rcp_scenario_kanban']")
        if vue_kanban is None:
            print("‚ùå Vue kanban RCP manquante")
            return False
        
        # V√©rifier la vue formulaire
        vue_form = root.find(".//record[@id='view_rcp_scenario_form']")
        if vue_form is None:
            print("‚ùå Vue formulaire RCP manquante")
            return False
        
        print("‚úÖ Vues RCP correctes")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des vues RCP: {e}")
        return False

def test_rcp_model():
    """Test du mod√®le RCP"""
    print("üîç Test du mod√®le RCP...")
    
    try:
        with open('smart_agri_decision/models/rcp_scenario.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier les m√©thodes de g√©n√©ration
        if 'generer_scenarios_rcp_standard' not in content:
            print("‚ùå M√©thode de g√©n√©ration RCP manquante")
            return False
        
        if 'action_analyser_scenarios' not in content:
            print("‚ùå M√©thode d'analyse RCP manquante")
            return False
        
        if 'action_exporter_analyse' not in content:
            print("‚ùå M√©thode d'export RCP manquante")
            return False
        
        # V√©rifier les sc√©narios RCP
        rcp_scenarios = ['RCP 2.6', 'RCP 4.5', 'RCP 6.0', 'RCP 8.5']
        for scenario in rcp_scenarios:
            if scenario not in content:
                print(f"‚ùå Sc√©nario {scenario} manquant dans le mod√®le")
                return False
        
        print("‚úÖ Mod√®le RCP correct")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du mod√®le RCP: {e}")
        return False

def test_rcp_demo_data():
    """Test des donn√©es de d√©monstration RCP"""
    print("üîç Test des donn√©es de d√©monstration RCP...")
    
    try:
        tree = ET.parse('smart_agri_decision/data/demo_rcp_scenarios.xml')
        root = tree.getroot()
        
        # V√©rifier les 4 sc√©narios RCP
        scenarios = root.findall(".//record[@model='rcp.scenario']")
        if len(scenarios) != 4:
            print(f"‚ùå Nombre de sc√©narios incorrect: {len(scenarios)} au lieu de 4")
            return False
        
        # V√©rifier les donn√©es annuelles
        donnees_annuelles = root.findall(".//record[@model='rcp.donnee.annuelle']")
        if len(donnees_annuelles) < 12:  # Au moins 3 ann√©es par sc√©nario
            print(f"‚ùå Nombre de donn√©es annuelles insuffisant: {len(donnees_annuelles)}")
            return False
        
        print("‚úÖ Donn√©es de d√©monstration RCP correctes")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des donn√©es de d√©monstration RCP: {e}")
        return False

def test_manifest_integration():
    """Test de l'int√©gration dans le manifest"""
    print("üîç Test de l'int√©gration dans le manifest...")
    
    try:
        with open('smart_agri_decision/__manifest__.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier l'inclusion des donn√©es RCP
        if 'demo_rcp_scenarios.xml' not in content:
            print("‚ùå Donn√©es RCP non incluses dans le manifest")
            return False
        
        print("‚úÖ Int√©gration manifest RCP correcte")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du manifest RCP: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test des Sc√©narios RCP IPCC dans Smart Agri Decision")
    print("=" * 60)
    
    tests = [
        test_rcp_menu_structure,
        test_rcp_actions,
        test_rcp_views,
        test_rcp_model,
        test_rcp_demo_data,
        test_manifest_integration
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution du test: {e}")
            results.append(False)
    
    # R√©sum√© des tests
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS RCP IPCC")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    for i, result in enumerate(results):
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        test_name = tests[i].__name__.replace('_', ' ').title()
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ R√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests RCP IPCC sont pass√©s avec succ√®s !")
        return 0
    else:
        print("‚ö†Ô∏è Certains tests RCP IPCC ont √©chou√©. V√©rifiez l'impl√©mentation.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
