from odoo import models, fields

class Exploitation(models.Model):
    _name = "exploitation.agri"
    _inherits = {"res.partner": "partner_id"}

    partner_id = fields.Many2one(
        "res.partner", required=True, ondelete="cascade"
    )
    superficie_totale = fields.Float(
        string="Superficie totale (ha)", default=0.0
    )
    type_sol = fields.Selection([
        ('argile', 'Argile'),
        ('sable', 'Sable'),
        ('limon', 'Limon'),
        ('limoneux', 'Limoneux'),
        ('argileux', 'Argileux'),
        ('sableux', 'Sableux')
    ], string='Type de sol')
    climat = fields.Selection([
        ('oceanique', 'Océanique'),
        ('continental', 'Continental'),
        ('mediterraneen', 'Méditerranéen'),
        ('montagnard', 'Montagnard')
    ], string='Climat')
    derniere_import_meteo = fields.Datetime('Dernier import météo')
    prochaine_alerte_meteo = fields.Datetime('Prochaine alerte météo')
    
    def action_importer_meteo(self):
        """Importe des données météo simulées"""
        # Simulation d'import de données météo
        from datetime import datetime, timedelta
        now = datetime.now()
        
        # Créer des données météo simulées pour 7 jours
        for i in range(7):
            date = now + timedelta(days=i)
            # Vérifier si le modèle meteo.data existe
            if self.env['ir.model'].search([('model', '=', 'meteo.data')]):
                self.env['meteo.data'].create({
                    'date': date,
                    'exploitation_id': self.id,
                    'temperature': 20 + (i * 0.5),
                    'precipitation': 50 - (i * 2),
                    'humidite': 70 - (i * 1),
                    'rayonnement_solaire': 2000 + (i * 100),
                    'vitesse_vent': 15 + (i * 0.5),
                    'alerte_gel': False,
                    'alerte_canicule': False,
                    'alerte_secheresse': False,
                    'alerte_inondation': False,
                    'alerte_vent': False
                })
        
        # Mettre à jour les champs de l'exploitation
        self.write({
            'derniere_import_meteo': now,
            'prochaine_alerte_meteo': now + timedelta(days=1)
        })
        
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': 'Import Météo Réussi',
                'message': f'7 jours de données météo importés pour {self.name}. 0 alerte(s) détectée(s).',
                'type': 'success',
                'sticky': False,
            }
        }
