from odoo import models, fields, api
from datetime import datetime, timedelta

class ExploitationAgri(models.Model):
    _name = 'exploitation.agri'
    _description = 'Exploitation Agricole'
    _inherits = {'res.partner': 'partner_id'}

    partner_id = fields.Many2one('res.partner', string='Partenaire', required=True, ondelete='cascade')
    
    # Champs spécifiques à l'exploitation
    superficie_totale = fields.Float(string='Superficie totale (ha)', default=0.0)
    type_sol = fields.Selection([
        ('argile', 'Argileux'),
        ('limon', 'Limoneux'),
        ('sable', 'Sableux'),
        ('calcaire', 'Calcaire')
    ], string='Type de sol')
    climat = fields.Selection([
        ('oceanique', 'Océanique'),
        ('continental', 'Continental'),
        ('mediterraneen', 'Méditerranéen'),
        ('montagnard', 'Montagnard')
    ], string='Climat')
    
    # Champs météo
    derniere_import_meteo = fields.Datetime(string='Dernier import météo', readonly=True)
    prochaine_alerte_meteo = fields.Datetime(string='Prochaine alerte météo', readonly=True)
    
    # Relations
    parcelles_ids = fields.One2many('parcelle.agri', 'exploitation_id', string='Parcelles')
    intrants_ids = fields.One2many('intrant.agri', 'exploitation_id', string='Intrants')
    interventions_ids = fields.One2many('intervention.agri', 'exploitation_id', string='Interventions')

    @api.model
    def create(self, vals):
        # Créer d'abord le partenaire
        partner_vals = {
            'name': vals.get('name', 'Nouvelle Exploitation'),
            'is_company': True,
            'customer_rank': 1,
            'supplier_rank': 1,
        }
        partner = self.env['res.partner'].create(partner_vals)
        vals['partner_id'] = partner.id
        return super().create(vals)

    def action_importer_meteo(self):
        """Importer des données météo simulées pour les 7 prochains jours"""
        now = datetime.now()
        
        # Mettre à jour le dernier import
        self.derniere_import_meteo = now
        
        # Calculer la prochaine alerte (dans 24h)
        self.prochaine_alerte_meteo = now + timedelta(hours=24)
        
        # Vérifier si le modèle meteo.data existe
        if self.env['ir.model'].search([('model', '=', 'meteo.data')]):
            # Créer des données météo simulées pour 7 jours
            for i in range(7):
                date = now + timedelta(days=i)
                self.env['meteo.data'].create({
                    'date': date,
                    'exploitation_id': self.id,
                    'temperature': 20 + (i * 0.5),
                    'precipitation': 50 - (i * 2),
                    'humidite': 70 - (i * 1),
                    'rayonnement_solaire': 2000 + (i * 100),
                    'vitesse_vent': 15 + (i * 0.5),
                    'alerte_gel': False,
                    'alerte_canicule': False,
                    'alerte_secheresse': False,
                    'alerte_inondation': False,
                    'alerte_vent': False
                })
        
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': 'Import Météo Réussi',
                'message': f'7 jours de données météo importés pour {self.name}.',
                'type': 'success',
                'sticky': False,
            }
        }
