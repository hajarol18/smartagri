#!/usr/bin/env python3
"""
Script de test pour v√©rifier la fonctionnalit√© du module Smart Agri Decision
Ce script teste la cr√©ation et la manipulation des mod√®les principaux
"""

import sys
import os

def test_module_structure():
    """Teste la structure du module"""
    print("üîç Test de la structure du module...")
    
    # V√©rifier les fichiers essentiels
    required_files = [
        'smart_agri_decision/__manifest__.py',
        'smart_agri_decision/models/__init__.py',
        'smart_agri_decision/views/main_menu.xml',
        'smart_agri_decision/security/ir.model.access.csv'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå Fichiers manquants : {missing_files}")
        return False
    else:
        print("‚úÖ Structure du module OK")
        return True

def test_models():
    """Teste les mod√®les Python"""
    print("\nüîç Test des mod√®les Python...")
    
    required_models = [
        'smart_agri_decision/models/exploitation.py',
        'smart_agri_decision/models/meteo.py',
        'smart_agri_decision/models/rcp_scenario.py',
        'smart_agri_decision/models/ia_model.py',
        'smart_agri_decision/models/ia_prediction.py',
        'smart_agri_decision/models/dashboard_main.py',
        'smart_agri_decision/models/dashboard_meteo.py',
        'smart_agri_decision/models/dashboard_agricole.py'
    ]
    
    missing_models = []
    for model_path in required_models:
        if not os.path.exists(model_path):
            missing_models.append(model_path)
    
    if missing_models:
        print(f"‚ùå Mod√®les manquants : {missing_models}")
        return False
    else:
        print("‚úÖ Tous les mod√®les sont pr√©sents")
        return True

def test_views():
    """Teste les vues XML"""
    print("\nüîç Test des vues XML...")
    
    required_views = [
        'smart_agri_decision/views/exploitation_views.xml',
        'smart_agri_decision/views/meteo_views.xml',
        'smart_agri_decision/views/rcp_views.xml',
        'smart_agri_decision/views/ia_views.xml',
        'smart_agri_decision/views/dashboard_views.xml',
        'smart_agri_decision/views/actions.xml',
        'smart_agri_decision/views/main_menu.xml'
    ]
    
    missing_views = []
    for view_path in required_views:
        if not os.path.exists(view_path):
            missing_views.append(view_path)
    
    if missing_views:
        print(f"‚ùå Vues manquantes : {missing_views}")
        return False
    else:
        print("‚úÖ Toutes les vues sont pr√©sentes")
        return True

def test_security():
    """Teste la s√©curit√©"""
    print("\nüîç Test de la s√©curit√©...")
    
    security_file = 'smart_agri_decision/security/ir.model.access.csv'
    
    if not os.path.exists(security_file):
        print("‚ùå Fichier de s√©curit√© manquant")
        return False
    
    # V√©rifier le contenu du fichier de s√©curit√©
    try:
        with open(security_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # V√©rifier que tous les mod√®les ont des droits d'acc√®s
        required_models_in_security = [
            'exploitation.agri',
            'meteo.data',
            'rcp.scenario',
            'ia.model',
            'ia.prediction',
            'dashboard.main',
            'dashboard.meteo',
            'dashboard.agricole'
        ]
        
        missing_security = []
        for model in required_models_in_security:
            if model not in content:
                missing_security.append(model)
        
        if missing_security:
            print(f"‚ùå Mod√®les sans droits de s√©curit√© : {missing_security}")
            return False
        else:
            print("‚úÖ S√©curit√© configur√©e pour tous les mod√®les")
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du fichier de s√©curit√© : {e}")
        return False

def test_manifest():
    """Teste le manifest"""
    print("\nüîç Test du manifest...")
    
    manifest_file = 'smart_agri_decision/__manifest__.py'
    
    if not os.path.exists(manifest_file):
        print("‚ùå Fichier manifest manquant")
        return False
    
    try:
        with open(manifest_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier les √©l√©ments essentiels
        required_elements = [
            'name',
            'version',
            'depends',
            'data',
            'installable'
        ]
        
        missing_elements = []
        for element in required_elements:
            if element not in content:
                missing_elements.append(element)
        
        if missing_elements:
            print(f"‚ùå √âl√©ments manquants dans le manifest : {missing_elements}")
            return False
        
        # V√©rifier que toutes les vues sont incluses
        required_views_in_manifest = [
            'views/rcp_views.xml',
            'views/ia_views.xml',
            'views/dashboard_views.xml',
            'views/actions.xml'
        ]
        
        missing_views_in_manifest = []
        for view in required_views_in_manifest:
            if view not in content:
                missing_views_in_manifest.append(view)
        
        if missing_views_in_manifest:
            print(f"‚ùå Vues manquantes dans le manifest : {missing_views_in_manifest}")
            return False
        
        print("‚úÖ Manifest correctement configur√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la lecture du manifest : {e}")
        return False

def test_data_files():
    """Teste les fichiers de donn√©es"""
    print("\nüîç Test des fichiers de donn√©es...")
    
    data_files = [
        'smart_agri_decision/data/demo_data.xml'
    ]
    
    missing_data = []
    for data_file in data_files:
        if not os.path.exists(data_file):
            missing_data.append(data_file)
    
    if missing_data:
        print(f"‚ùå Fichiers de donn√©es manquants : {missing_data}")
        return False
    else:
        print("‚úÖ Fichiers de donn√©es pr√©sents")
        return True

def main():
    """Fonction principale de test"""
    print("üöÄ Test du module Smart Agri Decision")
    print("=" * 50)
    
    tests = [
        test_module_structure,
        test_models,
        test_views,
        test_security,
        test_manifest,
        test_data_files
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test.__name__} : {e}")
            results.append(False)
    
    # R√©sum√© des tests
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    for i, (test, result) in enumerate(zip(tests, results)):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{i+1:2d}. {test.__name__:25s} : {status}")
    
    print(f"\nR√©sultat global : {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le module est pr√™t.")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez le module.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
